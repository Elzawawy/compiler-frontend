METHOD_BODY -> STATEMENT_LIST
STATEMENT_LIST -> STATEMENT STATEMENT_LIST`
STATEMENT -> DECLARATION
DECLARATION -> PRIMITIVE_TYPE id ;
PRIMITIVE_TYPE -> int
Match int
Match id
Match ;
STATEMENT_LIST` -> STATEMENT STATEMENT_LIST`
STATEMENT -> ASSIGNMENT
ASSIGNMENT -> id assign EXPRESSION ;
Match id
Match assign
EXPRESSION -> SIMPLE_EXPRESSION EXPRESSION0
SIMPLE_EXPRESSION -> TERM SIMPLE_EXPRESSION`
TERM -> FACTOR TERM`
FACTOR -> num
Match num
TERM` -> \L
SIMPLE_EXPRESSION` -> \L
EXPRESSION0 -> \L
Match ;
STATEMENT_LIST` -> STATEMENT STATEMENT_LIST`
STATEMENT -> IF
IF -> if ( EXPRESSION ) { STATEMENT } else { STATEMENT }
Match if
Match (
EXPRESSION -> SIMPLE_EXPRESSION EXPRESSION0
SIMPLE_EXPRESSION -> TERM SIMPLE_EXPRESSION`
TERM -> FACTOR TERM`
FACTOR -> id
Match id
TERM` -> \L
SIMPLE_EXPRESSION` -> \L
EXPRESSION0 -> relop SIMPLE_EXPRESSION
Match relop
SIMPLE_EXPRESSION -> TERM SIMPLE_EXPRESSION`
TERM -> FACTOR TERM`
FACTOR -> num
Match num
TERM` -> \L
SIMPLE_EXPRESSION` -> \L
Match )
Match {
STATEMENT -> ASSIGNMENT
ASSIGNMENT -> id assign EXPRESSION ;
Match id
Match assign
EXPRESSION -> SIMPLE_EXPRESSION EXPRESSION0
SIMPLE_EXPRESSION -> TERM SIMPLE_EXPRESSION`
TERM -> FACTOR TERM`
FACTOR -> num
Match num
TERM` -> \L
SIMPLE_EXPRESSION` -> \L
EXPRESSION0 -> \L
Match ;
Match }
Match else
Match {
STATEMENT -> ASSIGNMENT
ASSIGNMENT -> id assign EXPRESSION ;
Match id
Match assign
EXPRESSION -> SIMPLE_EXPRESSION EXPRESSION0
SIMPLE_EXPRESSION -> TERM SIMPLE_EXPRESSION`
TERM -> FACTOR TERM`
FACTOR -> num
Match num
TERM` -> \L
SIMPLE_EXPRESSION` -> \L
EXPRESSION0 -> \L
Match ;
Error, missing }
STATEMENT_LIST` -> \L
